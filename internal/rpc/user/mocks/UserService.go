// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	user "github.com/sparhokm/go-course-ms-auth/internal/model/user"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, userInfo, newPassword
func (_m *MockUserService) Create(ctx context.Context, userInfo *user.Info, newPassword *user.Password) (int64, error) {
	ret := _m.Called(ctx, userInfo, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.Info, *user.Password) (int64, error)); ok {
		return rf(ctx, userInfo, newPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.Info, *user.Password) int64); ok {
		r0 = rf(ctx, userInfo, newPassword)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.Info, *user.Password) error); ok {
		r1 = rf(ctx, userInfo, newPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userInfo *user.Info
//   - newPassword *user.Password
func (_e *MockUserService_Expecter) Create(ctx interface{}, userInfo interface{}, newPassword interface{}) *MockUserService_Create_Call {
	return &MockUserService_Create_Call{Call: _e.mock.On("Create", ctx, userInfo, newPassword)}
}

func (_c *MockUserService_Create_Call) Run(run func(ctx context.Context, userInfo *user.Info, newPassword *user.Password)) *MockUserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.Info), args[2].(*user.Password))
	})
	return _c
}

func (_c *MockUserService_Create_Call) Return(_a0 int64, _a1 error) *MockUserService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Create_Call) RunAndReturn(run func(context.Context, *user.Info, *user.Password) (int64, error)) *MockUserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockUserService) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUserService_Expecter) Delete(ctx interface{}, id interface{}) *MockUserService_Delete_Call {
	return &MockUserService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUserService_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockUserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUserService_Delete_Call) Return(_a0 error) *MockUserService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockUserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockUserService) Get(ctx context.Context, id int64) (*user.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*user.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *user.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUserService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUserService_Expecter) Get(ctx interface{}, id interface{}) *MockUserService_Get_Call {
	return &MockUserService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUserService_Get_Call) Run(run func(ctx context.Context, id int64)) *MockUserService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUserService_Get_Call) Return(_a0 *user.User, _a1 error) *MockUserService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Get_Call) RunAndReturn(run func(context.Context, int64) (*user.User, error)) *MockUserService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, name, email, role
func (_m *MockUserService) Update(ctx context.Context, id int64, name *string, email *string, role *user.Role) error {
	ret := _m.Called(ctx, id, name, email, role)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *string, *string, *user.Role) error); ok {
		r0 = rf(ctx, id, name, email, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - name *string
//   - email *string
//   - role *user.Role
func (_e *MockUserService_Expecter) Update(ctx interface{}, id interface{}, name interface{}, email interface{}, role interface{}) *MockUserService_Update_Call {
	return &MockUserService_Update_Call{Call: _e.mock.On("Update", ctx, id, name, email, role)}
}

func (_c *MockUserService_Update_Call) Run(run func(ctx context.Context, id int64, name *string, email *string, role *user.Role)) *MockUserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*string), args[3].(*string), args[4].(*user.Role))
	})
	return _c
}

func (_c *MockUserService_Update_Call) Return(_a0 error) *MockUserService_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Update_Call) RunAndReturn(run func(context.Context, int64, *string, *string, *user.Role) error) *MockUserService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
